@page "/test/test"

<h1 class="text-center">Справочник по оборудке</h1>

@foreach (var item in Heading)
{
    <h2>@item</h2>
}

@if (IsButtonHeading)
{
    <div class="input-box">
        <label>Заголовок</label>
        <input type="text" @bind-value="@HeadingStr" @bind-value:event="oninput" @onkeydown="@ButtonHeadingOff" @ref="inputRef" />
    </div>  
}

<nav class="fixed-bottom-menu">
    <ul class="menu-list">
        <li class="menu-item">
            <a href="#">+</a>
            <ul class="submenu">
                <li><a href="test/test" @onclick="@ButtonHeadingOn">Заголовок</a></li>
                <li><a href="#">Описание</a></li>
                <li><a href="#">Изображение</a></li>
            </ul>
        </li>
    </ul>
</nav>

@code {
    private bool IsButtonHeading { get; set; } = false;
    private List<string> Heading { get; set; } = new List<string>();
    private string HeadingStr { get; set; } = string.Empty;
    private ElementReference inputRef;

    private async Task ButtonHeadingOn(MouseEventArgs e)
    {
        IsButtonHeading = true;
        HeadingStr = string.Empty; // Очищаем предыдущее значение
        await Task.CompletedTask;
    }

    private void ButtonHeadingOff(KeyboardEventArgs e)
    {
        if ((e.Code == "Enter" || e.Key == "Enter") && !string.IsNullOrWhiteSpace(HeadingStr))
        {
            Heading.Add(HeadingStr.Trim());
            HeadingStr = string.Empty;
            IsButtonHeading = false;

        }

        if (e.Code == "Escape" || e.Key == "Escape")
        {
            IsButtonHeading = false;
            HeadingStr = string.Empty;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Если input появился на экране - устанавливаем фокус программно
        if (IsButtonHeading)
        {
            await inputRef.FocusAsync();
        }
    }
}